// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vegetation.DAL.DbContexts;

namespace Vegetation.Api.Migrations
{
    [DbContext(typeof(VegetationDbContext))]
    [Migration("13980421130421_AddcodeingAndMainEntity")]
    partial class AddcodeingAndMainEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.ClimateTinyRatio", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ClimateTinyRatios");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.DensityRatio", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DensityRatios");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.IrrigationMethod", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IrrigationMethods");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.Region", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.Specie", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("VegetationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("VegetationTypeId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.SpotType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SpotTypes");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.Treaty", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Treaties");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.VegetationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("SpecieId");

                    b.HasKey("Id");

                    b.ToTable("VegetationTypes");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Leyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubsystemId");

                    b.Property<string>("Symbol")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("SubsystemId");

                    b.ToTable("Leyer");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Main.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("IrrigationMethodId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("RegionId");

                    b.Property<int>("Space")
                        .HasMaxLength(100);

                    b.Property<short>("SpotTypeId");

                    b.Property<short>("TreatyId");

                    b.Property<short>("VegetationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("IrrigationMethodId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SpotTypeId");

                    b.HasIndex("TreatyId");

                    b.HasIndex("VegetationTypeId");

                    b.ToTable("Spots");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentMenuId");

                    b.Property<int>("SubsystemId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.HasIndex("SubsystemId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasPager");

                    b.Property<string>("Query")
                        .IsRequired();

                    b.Property<int>("ReportGroupId");

                    b.Property<string>("SumColumns");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("ViewColumns");

                    b.HasKey("Id");

                    b.HasIndex("ReportGroupId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.ReportColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAverage");

                    b.Property<bool>("IsSeparator");

                    b.Property<bool>("IsSum");

                    b.Property<int>("ReportId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportColumns");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.ReportGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ReportGroups");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.ReportParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOptional");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Priority");

                    b.Property<string>("Query");

                    b.Property<int>("ReportId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<int?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportParameters");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.StaticItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault");

                    b.Property<int>("ReportParameterId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ReportParameterId");

                    b.ToTable("StaticItems");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Subsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Subsystems");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Deactivated");

                    b.Property<string>("Family")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Codeing.Specie", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Codeing.VegetationType", "VegetationType")
                        .WithMany("Species")
                        .HasForeignKey("VegetationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Leyer", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Subsystem", "Subsystem")
                        .WithMany("Leyers")
                        .HasForeignKey("SubsystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Main.Spot", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Codeing.IrrigationMethod", "IrrigationMethod")
                        .WithMany("Spots")
                        .HasForeignKey("IrrigationMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vegetation.DAL.Entities.Codeing.Region", "Regiond")
                        .WithMany("Spots")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vegetation.DAL.Entities.Codeing.SpotType", "SpotType")
                        .WithMany("Spots")
                        .HasForeignKey("SpotTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vegetation.DAL.Entities.Codeing.Treaty", "Treaty")
                        .WithMany("Spots")
                        .HasForeignKey("TreatyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vegetation.DAL.Entities.Codeing.VegetationType", "VegetationType")
                        .WithMany("Spots")
                        .HasForeignKey("VegetationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Menu", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Menu", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("ParentMenuId");

                    b.HasOne("Vegetation.DAL.Entities.Subsystem", "Subsystem")
                        .WithMany("Menus")
                        .HasForeignKey("SubsystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.Report", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.ReportGroup", "ReportGroup")
                        .WithMany("Reports")
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.ReportColumn", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Report", "Report")
                        .WithMany("ReportColumns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.ReportParameter", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Report", "Report")
                        .WithMany("ReportParameters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.StaticItem", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.ReportParameter", "ReportParameter")
                        .WithMany("StaticItems")
                        .HasForeignKey("ReportParameterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vegetation.DAL.Entities.UserRole", b =>
                {
                    b.HasOne("Vegetation.DAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vegetation.DAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
